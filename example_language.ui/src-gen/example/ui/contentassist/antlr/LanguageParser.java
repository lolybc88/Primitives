/*
* generated by Xtext
*/
package example.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import example.services.LanguageGrammarAccess;

public class LanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private LanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected example.ui.contentassist.antlr.internal.InternalLanguageParser createParser() {
		example.ui.contentassist.antlr.internal.InternalLanguageParser result = new example.ui.contentassist.antlr.internal.InternalLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMTLPrimitiveAccess().getAlternatives(), "rule__MTLPrimitive__Alternatives");
					put(grammarAccess.getComposerAccess().getGroup(), "rule__Composer__Group__0");
					put(grammarAccess.getComposerAccess().getGroup_4(), "rule__Composer__Group_4__0");
					put(grammarAccess.getCreatorAccess().getGroup(), "rule__Creator__Group__0");
					put(grammarAccess.getCreatorAccess().getGroup_6(), "rule__Creator__Group_6__0");
					put(grammarAccess.getCreatorAccess().getGroup_6_1(), "rule__Creator__Group_6_1__0");
					put(grammarAccess.getUpdaterAccess().getGroup(), "rule__Updater__Group__0");
					put(grammarAccess.getUpdaterAccess().getGroup_5(), "rule__Updater__Group_5__0");
					put(grammarAccess.getUpdaterAccess().getGroup_5_2(), "rule__Updater__Group_5_2__0");
					put(grammarAccess.getFeatureAssignerAccess().getGroup(), "rule__FeatureAssigner__Group__0");
					put(grammarAccess.getDeclarerAccess().getGroup(), "rule__Declarer__Group__0");
					put(grammarAccess.getAssignerAccess().getGroup(), "rule__Assigner__Group__0");
					put(grammarAccess.getComposerAccess().getNameAssignment_1(), "rule__Composer__NameAssignment_1");
					put(grammarAccess.getComposerAccess().getPrimitivesAssignment_3(), "rule__Composer__PrimitivesAssignment_3");
					put(grammarAccess.getComposerAccess().getPrimitivesAssignment_4_1(), "rule__Composer__PrimitivesAssignment_4_1");
					put(grammarAccess.getCreatorAccess().getTypeAssignment_3(), "rule__Creator__TypeAssignment_3");
					put(grammarAccess.getCreatorAccess().getFeaturesAssignment_6_0(), "rule__Creator__FeaturesAssignment_6_0");
					put(grammarAccess.getCreatorAccess().getFeaturesAssignment_6_1_1(), "rule__Creator__FeaturesAssignment_6_1_1");
					put(grammarAccess.getCreatorAccess().getCreatorNameAssignment_9(), "rule__Creator__CreatorNameAssignment_9");
					put(grammarAccess.getUpdaterAccess().getTypeAssignment_3(), "rule__Updater__TypeAssignment_3");
					put(grammarAccess.getUpdaterAccess().getFeaturesAssignment_5_1(), "rule__Updater__FeaturesAssignment_5_1");
					put(grammarAccess.getUpdaterAccess().getFeaturesAssignment_5_2_1(), "rule__Updater__FeaturesAssignment_5_2_1");
					put(grammarAccess.getFeatureAssignerAccess().getFeatureAssignment_2(), "rule__FeatureAssigner__FeatureAssignment_2");
					put(grammarAccess.getFeatureAssignerAccess().getValueAssignment_4(), "rule__FeatureAssigner__ValueAssignment_4");
					put(grammarAccess.getDeclarerAccess().getTypeAssignment_3(), "rule__Declarer__TypeAssignment_3");
					put(grammarAccess.getDeclarerAccess().getNameAssignment_5(), "rule__Declarer__NameAssignment_5");
					put(grammarAccess.getAssignerAccess().getVarAssignment_3(), "rule__Assigner__VarAssignment_3");
					put(grammarAccess.getAssignerAccess().getCreatorAssignment_5(), "rule__Assigner__CreatorAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			example.ui.contentassist.antlr.internal.InternalLanguageParser typedParser = (example.ui.contentassist.antlr.internal.InternalLanguageParser) parser;
			typedParser.entryRuleComposer();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
